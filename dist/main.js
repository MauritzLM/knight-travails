(()=>{"use strict";function t(){let t=[];for(let e=0;e<8;e++)for(let r=0;r<8;r++){let o=[e,r];t.push(o)}return t}function e(t,e){return t.toString()===e.toString()}function r(t,r){for(let o=0;o<r.length;o++)if(e(t,r[o]))return!0;return!1}function o(o,n,s){let i=t();if(!r(n,i))return"starting square does not exist";if(!r(s,i))return"end square does not exist";let l="";const h=[[n,""]];for(;h.length>0;){let[t,r]=h.shift();if(r+=`[${t}] `,e(t,s)){let t=r.split(" ");t.pop(),console.log(`You made it in ${t.length-1} moves! Here's your path:`);for(let e=0;e<t.length;e++)console.log(t[e]);return t}for(let e=0;e<o[t].length;e++){let n=o[t][e];l.includes(n.toString())||(l+=`${n}, `,h.push([n,r]))}}}const n=new class{constructor(){this.moves=[[-1,-2],[-2,-1],[1,-2],[-2,1],[2,-1],[-1,2],[1,2],[2,1]],this.graph={},this.board=t()}buildGraph(){for(let t=0;t<this.board.length;t++){let e=this.board[t];this.graph[e]=[];for(let t=0;t<this.moves.length;t++){let r=[this.moves[t][0]+e[0],this.moves[t][1]+e[1]];this.validMove(r,this.board)&&this.graph[e].push(r)}}}validMove(t,r){for(let o=0;o<r.length;o++)if(e(t,r[o]))return!0;return!1}};n.buildGraph(),o(n.graph,[7,1],[3,4]),o(n.graph,[0,1],[6,7])})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,